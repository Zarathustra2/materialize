[workspace]
members = [
    "src/avro",
    "src/avro-derive"
]
# Use Cargo's new feature resolver, which can handle target-specific features.
# See: https://blog.rust-lang.org/2021/03/25/Rust-1.51.0.html#cargos-new-feature-resolver
resolver = "2"

[profile.dev.package]
# Compile the backtrace crate and its dependencies with all optimizations, even
# in dev builds, since otherwise backtraces can take 20s+ to symbolize. With
# optimizations enabled, symbolizing a backtrace takes less than 1s.
addr2line = { opt-level = 3 }
adler = { opt-level = 3 }
backtrace = { opt-level = 3 }
gimli = { opt-level = 3 }
miniz_oxide = { opt-level = 3 }
object = { opt-level = 3 }
rustc-demangle = { opt-level = 3 }

[profile.release]
# Emit only the line info tables, not full debug info, in release builds, to
# substantially reduce the size of the debug info. Line info tables are enough
# to correctly symbolicate a backtrace, but do not produce an ideal interactive
# debugger experience. This seems to be the right tradeoff for release builds:
# it's unlikely we're going to get interactive access to a debugger in
# production installations, but we still want useful crash reports.
debug = 1
